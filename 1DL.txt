import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

#define a tensor
data = [[1,2],
       [3,4]]

x = tf.constant(data)
print (x)

# Convert numpy array to tensor
np_array = np.array(data)
x_np = tf.convert_to_tensor(np_array)
print(x_np)

# Tensor of ones like another tensor
x_ones = tf.ones_like(x)
print("Ones Tensor: \n", x_ones)

# Random tensor with the same shape as x
x_rand = tf.random.uniform(shape=x.shape, dtype=tf.float32)
print("Random Tensor:\n", x_rand)

# Creating tensors with specific shapes
shape = (2, 3)
random_tensor = tf.random.uniform(shape)
print(random_tensor)

ones_tensor = tf.ones(shape)
print(ones_tensor)

zeros_tensor = tf.zeros(shape)
print(zeros_tensor)

# Tensor operations
tensor = tf.random.uniform((3, 4))
print(tensor)

# Basic indexing and slicing
tensor = tf.ones((4, 4))
print(tensor)
tensor1 = tf.zeros((4, 4))
print(tensor1)

# Concatenation
tensor2 = tf.concat([tensor, tensor1], axis=0)
print(tensor2)

# Element-wise multiplication
tensor_mul = tf.multiply(tensor, tensor1)
print(tensor_mul)

# Transposing a tensor
tensor_T = tf.transpose(tensor)
print(tensor_T)

# In-place addition (TensorFlow doesn't support in-place operations as PyTorch does)
tensor_add = tensor + 3
print(tensor_add)

# Convert TensorFlow tensor to numpy array
t = tf.ones((5,))
print(t)
n = t.numpy()
print(n)
print(type(n))

# Plotting matrix
plt.matshow(tensor2)
plt.colorbar()
plt.title('Tensor Matrix Plot')
plt.show() 

n=12
m=12
fill_value =7

x = tf.fill((n,m), fill_value)
print(x) 


**********Pytorch*********

data = [[1,2],
       [3,4]]
x = torch.tensor(data)
print(x)

np_array = np.array(data)
x_np = torch.from_numpy(np_array)
print(x_np)

x_ones = torch.ones_like(x)
print(x_ones)
x_rand = torch.rand_like(x, dtype=torch.float)
print(x_rand)

shape = (3,4)
random_tensor = torch.rand(shape)
print(random_tensor)

ones_tensor = torch.ones(shape)
print(ones_tensor)

zeros_tensor = torch.zeros(shape)
print(zeros_tensor)

#indexing and slicing
tensor = torch.ones(4,4)
print(tensor)

tensor1 = torch.zeros(4,4)
print(tensor1)

#concatenation
tensor2= torch.cat([tensor, tensor1])
print(tensor2)

#multiplication
tensor.mul(tensor1)
tensor*tensor1

tensor.add(3)
print(tensor)

t = torch.ones(5)
print(t)
n = t.numpy()
print(n)

#plot matirx
plt.matshow(x.numpy())
plt.colorbar()
plt.title("pytorch matrix plot:")
plt.show()
